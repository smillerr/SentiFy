generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MoodCategory {
  feliz
  triste
  motivadora
  relajada
  romantica
  oscura
  fiesta
  melancolica
  sin_clasificar
}

model User {
  id                String   @id @default(cuid())
  spotifyId         String   @unique
  displayName       String?
  email             String?
  profileImageUrl   String?
  accessToken       String
  refreshToken      String
  tokenExpiresAt    DateTime
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  tracks     Track[]
  playlists  Playlist[]

  @@map("users")
}

model Track {
  id             String   @id @default(cuid())
  spotifyTrackId String
  userId         String
  name           String
  artist         String
  album          String
  imageUrl       String
  valence        Float?
  energy         Float?
  danceability   Float?
  acousticness   Float?
  tempo          Float?
  loudness       Float?
  moodCategory   MoodCategory?
  createdAt      DateTime @default(now())

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlistTracks PlaylistTrack[]

  @@unique([userId, spotifyTrackId])
  @@map("tracks")
}

model Playlist {
  id             String   @id @default(cuid())
  userId         String
  spotifyPlaylistId String?
  name           String
  description    String
  coverImageUrl  String?
  moodCategory   MoodCategory
  isSynced       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlistTracks PlaylistTrack[]

  @@map("playlists")
}

model PlaylistTrack {
  id         String @id @default(cuid())
  playlistId String
  trackId    String
  addedAt    DateTime @default(now())

  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  track      Track    @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([playlistId, trackId])
  @@map("playlist_tracks")
}
